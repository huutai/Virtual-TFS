//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.Linq;
using System.Linq.Expressions;
using VirtualTFS.DAL;

namespace VirtualTFS.DAL.Repositories
{
    /// <summary>
    /// Repository for table aspnet_Roles 
    /// </summary>
    public partial class aspnet_RolesRepository
    {
        #region auto generate code

        #region variable define

        IUnitOfWork unitOfWork;

        #endregion


        #region Ctor

        // Default contructor that creates an instance of unit of work
        public aspnet_RolesRepository()
        {
            if (null == unitOfWork)
                unitOfWork = new UnitOfWork();
        }

        // Constructor of an instance of unit of work
        public aspnet_RolesRepository(IUnitOfWork _unitOfWork)
        {
            unitOfWork = _unitOfWork;
        }

        #endregion


        #region Basic C.R.U.D. operations

        // List of all aspnet_Roles 
        public IList<aspnet_Roles> GetAllaspnet_Roles()
        {
            return unitOfWork.GetAll<aspnet_Roles>();
        }

        // Find all aspnet_Roles 
        public IList<aspnet_Roles> Findaspnet_Roles(Expression<Func<aspnet_Roles, bool>> expression)
        {
            return unitOfWork.Find<aspnet_Roles>(expression).ToList();
        }

        // Get single aspnet_Roles 
        public aspnet_Roles GetSingleaspnet_Roles(Func<aspnet_Roles, bool> expression)
        {
            return unitOfWork.GetSingle<aspnet_Roles>(expression);
        }

        // Add a new aspnet_Roles 
        public aspnet_Roles Addaspnet_Roles(aspnet_Roles _aspnet_Roles)
        {
            unitOfWork.Add<aspnet_Roles>(_aspnet_Roles);
            return _aspnet_Roles;
        }

        // Delete a existed aspnet_Roles 
        public void Deleteaspnet_Roles(aspnet_Roles _aspnet_Roles)
        {
            unitOfWork.Delete<aspnet_Roles>(_aspnet_Roles);
        }

        // Delete batch a existed aspnet_Roles 
        public void DeleteBatchaspnet_Roles(IEnumerable<aspnet_Roles> collection)
        {
        	foreach(var item in collection)
        	{
        		unitOfWork.Delete<aspnet_Roles>(item);
        	}
        }

        // Update a existed aspnet_Roles 
        public aspnet_Roles Updateaspnet_Roles(aspnet_Roles _aspnet_Roles)
        {
            unitOfWork.Update<aspnet_Roles>(_aspnet_Roles);
            return _aspnet_Roles;
        }

        // Refresh an existed aspnet_Roles 
        public aspnet_Roles Refeshaspnet_Roles(aspnet_Roles _aspnet_Roles)
        {
            unitOfWork.Refresh<aspnet_Roles>(_aspnet_Roles);
            return _aspnet_Roles;
        }

        // Refresh Allaspnet_Roles 
        public void RefreshListaspnet_Roles(IEnumerable<aspnet_Roles> list)
        {
            unitOfWork.RefreshList<aspnet_Roles>(list);
        }

        // Commit all changes 
        public void Commit()
        {
            unitOfWork.Commit();
        }

        #endregion


        #endregion


        #region all the custom code


        #endregion

    }
}
