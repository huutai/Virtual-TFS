//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.Linq;
using System.Linq.Expressions;
using VirtualTFS.DAL;

namespace VirtualTFS.DAL.Repositories
{
    /// <summary>
    /// Repository for table TaskHistory 
    /// </summary>
    public partial class TaskHistoryRepository
    {
        #region auto generate code

        #region variable define

        IUnitOfWork unitOfWork;

        #endregion


        #region Ctor

        // Default contructor that creates an instance of unit of work
        public TaskHistoryRepository()
        {
            if (null == unitOfWork)
                unitOfWork = new UnitOfWork();
        }

        // Constructor of an instance of unit of work
        public TaskHistoryRepository(IUnitOfWork _unitOfWork)
        {
            unitOfWork = _unitOfWork;
        }

        #endregion


        #region Basic C.R.U.D. operations

        // List of all TaskHistory 
        public IList<TaskHistory> GetAllTaskHistory()
        {
            return unitOfWork.GetAll<TaskHistory>();
        }

        // Find all TaskHistory 
        public IList<TaskHistory> FindTaskHistory(Expression<Func<TaskHistory, bool>> expression)
        {
            return unitOfWork.Find<TaskHistory>(expression).ToList();
        }

        // Get single TaskHistory 
        public TaskHistory GetSingleTaskHistory(Func<TaskHistory, bool> expression)
        {
            return unitOfWork.GetSingle<TaskHistory>(expression);
        }

        // Add a new TaskHistory 
        public TaskHistory AddTaskHistory(TaskHistory _taskHistory)
        {
            unitOfWork.Add<TaskHistory>(_taskHistory);
            return _taskHistory;
        }

        // Delete a existed TaskHistory 
        public void DeleteTaskHistory(TaskHistory _taskHistory)
        {
            unitOfWork.Delete<TaskHistory>(_taskHistory);
        }

        // Delete batch a existed TaskHistory 
        public void DeleteBatchTaskHistory(IEnumerable<TaskHistory> collection)
        {
        	foreach(var item in collection)
        	{
        		unitOfWork.Delete<TaskHistory>(item);
        	}
        }

        // Update a existed TaskHistory 
        public TaskHistory UpdateTaskHistory(TaskHistory _taskHistory)
        {
            unitOfWork.Update<TaskHistory>(_taskHistory);
            return _taskHistory;
        }

        // Refresh an existed TaskHistory 
        public TaskHistory RefeshTaskHistory(TaskHistory _taskHistory)
        {
            unitOfWork.Refresh<TaskHistory>(_taskHistory);
            return _taskHistory;
        }

        // Refresh AllTaskHistory 
        public void RefreshListTaskHistory(IEnumerable<TaskHistory> list)
        {
            unitOfWork.RefreshList<TaskHistory>(list);
        }

        // Commit all changes 
        public void Commit()
        {
            unitOfWork.Commit();
        }

        #endregion


        #endregion


        #region all the custom code


        #endregion
    }
}
