//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.Linq;
using System.Linq.Expressions;
using VirtualTFS.DAL;

namespace VirtualTFS.DAL.Repositories
{
    /// <summary>
    /// Repository for table Iteration 
    /// </summary>
    public partial class IterationRepository
    {
        #region auto generate code

        #region variable define

        IUnitOfWork unitOfWork;

        #endregion


        #region Ctor

        // Default contructor that creates an instance of unit of work
        public IterationRepository()
        {
            if (null == unitOfWork)
                unitOfWork = new UnitOfWork();
        }

        // Constructor of an instance of unit of work
        public IterationRepository(IUnitOfWork _unitOfWork)
        {
            unitOfWork = _unitOfWork;
        }

        #endregion


        #region Basic C.R.U.D. operations

        // List of all Iteration 
        public IList<Iteration> GetAllIteration()
        {
            return unitOfWork.GetAll<Iteration>();
        }

        // Find all Iteration 
        public IList<Iteration> FindIteration(Expression<Func<Iteration, bool>> expression)
        {
            return unitOfWork.Find<Iteration>(expression).ToList();
        }

        // Get single Iteration 
        public Iteration GetSingleIteration(Func<Iteration, bool> expression)
        {
            return unitOfWork.GetSingle<Iteration>(expression);
        }

        // Add a new Iteration 
        public Iteration AddIteration(Iteration _iteration)
        {
            unitOfWork.Add<Iteration>(_iteration);
            return _iteration;
        }

        // Delete a existed Iteration 
        public void DeleteIteration(Iteration _iteration)
        {
            unitOfWork.Delete<Iteration>(_iteration);
        }

        // Delete batch a existed Iteration 
        public void DeleteBatchIteration(IEnumerable<Iteration> collection)
        {
        	foreach(var item in collection)
        	{
        		unitOfWork.Delete<Iteration>(item);
        	}
        }

        // Update a existed Iteration 
        public Iteration UpdateIteration(Iteration _iteration)
        {
            unitOfWork.Update<Iteration>(_iteration);
            return _iteration;
        }

        // Refresh an existed Iteration 
        public Iteration RefeshIteration(Iteration _iteration)
        {
            unitOfWork.Refresh<Iteration>(_iteration);
            return _iteration;
        }

        // Refresh AllIteration 
        public void RefreshListIteration(IEnumerable<Iteration> list)
        {
            unitOfWork.RefreshList<Iteration>(list);
        }

        // Commit all changes 
        public void Commit()
        {
            unitOfWork.Commit();
        }

        #endregion


        #endregion


        #region all the custom code


        #endregion
    }
}
