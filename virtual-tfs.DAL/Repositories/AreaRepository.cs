//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.Linq;
using System.Linq.Expressions;
using VirtualTFS.DAL;

namespace VirtualTFS.DAL.Repositories
{
    /// <summary>
    /// Repository for table Area 
    /// </summary>
    public partial class AreaRepository
    {
        #region auto generate code

        #region variable define

        IUnitOfWork unitOfWork;

        #endregion


        #region Ctor

        // Default contructor that creates an instance of unit of work
        public AreaRepository()
        {
            if (null == unitOfWork)
                unitOfWork = new UnitOfWork();
        }

        // Constructor of an instance of unit of work
        public AreaRepository(IUnitOfWork _unitOfWork)
        {
            unitOfWork = _unitOfWork;
        }

        #endregion


        #region Basic C.R.U.D. operations

        // List of all Area 
        public IList<Area> GetAllArea()
        {
            return unitOfWork.GetAll<Area>();
        }

        // Find all Area 
        public IList<Area> FindArea(Expression<Func<Area, bool>> expression)
        {
            return unitOfWork.Find<Area>(expression).ToList();
        }

        // Get single Area 
        public Area GetSingleArea(Func<Area, bool> expression)
        {
            return unitOfWork.GetSingle<Area>(expression);
        }

        // Add a new Area 
        public Area AddArea(Area _area)
        {
            unitOfWork.Add<Area>(_area);
            return _area;
        }

        // Delete a existed Area 
        public void DeleteArea(Area _area)
        {
            unitOfWork.Delete<Area>(_area);
        }

        // Delete batch a existed Area 
        public void DeleteBatchArea(IEnumerable<Area> collection)
        {
        	foreach(var item in collection)
        	{
        		unitOfWork.Delete<Area>(item);
        	}
        }

        // Update a existed Area 
        public Area UpdateArea(Area _area)
        {
            unitOfWork.Update<Area>(_area);
            return _area;
        }

        // Refresh an existed Area 
        public Area RefeshArea(Area _area)
        {
            unitOfWork.Refresh<Area>(_area);
            return _area;
        }

        // Refresh AllArea 
        public void RefreshListArea(IEnumerable<Area> list)
        {
            unitOfWork.RefreshList<Area>(list);
        }

        // Commit all changes 
        public void Commit()
        {
            unitOfWork.Commit();
        }

        #endregion


        #endregion


        #region all the custom code


        #endregion
    }
}
