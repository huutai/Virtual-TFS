//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.Linq;
using System.Linq.Expressions;
using VirtualTFS.DAL;

namespace VirtualTFS.DAL.Repositories
{
    /// <summary>
    /// Repository for table aspnet_Paths 
    /// </summary>
    public partial class aspnet_PathsRepository
    {
        #region auto generate code

        #region variable define

        IUnitOfWork unitOfWork;

        #endregion


        #region Ctor

        // Default contructor that creates an instance of unit of work
        public aspnet_PathsRepository()
        {
            if (null == unitOfWork)
                unitOfWork = new UnitOfWork();
        }

        // Constructor of an instance of unit of work
        public aspnet_PathsRepository(IUnitOfWork _unitOfWork)
        {
            unitOfWork = _unitOfWork;
        }

        #endregion


        #region Basic C.R.U.D. operations

        // List of all aspnet_Paths 
        public IList<aspnet_Paths> GetAllaspnet_Paths()
        {
            return unitOfWork.GetAll<aspnet_Paths>();
        }

        // Find all aspnet_Paths 
        public IList<aspnet_Paths> Findaspnet_Paths(Expression<Func<aspnet_Paths, bool>> expression)
        {
            return unitOfWork.Find<aspnet_Paths>(expression).ToList();
        }

        // Get single aspnet_Paths 
        public aspnet_Paths GetSingleaspnet_Paths(Func<aspnet_Paths, bool> expression)
        {
            return unitOfWork.GetSingle<aspnet_Paths>(expression);
        }

        // Add a new aspnet_Paths 
        public aspnet_Paths Addaspnet_Paths(aspnet_Paths _aspnet_Paths)
        {
            unitOfWork.Add<aspnet_Paths>(_aspnet_Paths);
            return _aspnet_Paths;
        }

        // Delete a existed aspnet_Paths 
        public void Deleteaspnet_Paths(aspnet_Paths _aspnet_Paths)
        {
            unitOfWork.Delete<aspnet_Paths>(_aspnet_Paths);
        }

        // Delete batch a existed aspnet_Paths 
        public void DeleteBatchaspnet_Paths(IEnumerable<aspnet_Paths> collection)
        {
        	foreach(var item in collection)
        	{
        		unitOfWork.Delete<aspnet_Paths>(item);
        	}
        }

        // Update a existed aspnet_Paths 
        public aspnet_Paths Updateaspnet_Paths(aspnet_Paths _aspnet_Paths)
        {
            unitOfWork.Update<aspnet_Paths>(_aspnet_Paths);
            return _aspnet_Paths;
        }

        // Refresh an existed aspnet_Paths 
        public aspnet_Paths Refeshaspnet_Paths(aspnet_Paths _aspnet_Paths)
        {
            unitOfWork.Refresh<aspnet_Paths>(_aspnet_Paths);
            return _aspnet_Paths;
        }

        // Refresh Allaspnet_Paths 
        public void RefreshListaspnet_Paths(IEnumerable<aspnet_Paths> list)
        {
            unitOfWork.RefreshList<aspnet_Paths>(list);
        }

        // Commit all changes 
        public void Commit()
        {
            unitOfWork.Commit();
        }

        #endregion


        #endregion


        #region all the custom code


        #endregion

    }
}
