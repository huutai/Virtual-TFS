<#@ template language="C#" debug="true" hostspecific="true"#>
<#@ output extension=".cs"#>
<#@ include file="EF.Utility.CS.ttinclude"#>
<#@ import namespace="System.Diagnostics" #>
<#
    CodeGenerationTools code = new CodeGenerationTools(this);
    MetadataLoader loader = new MetadataLoader(this);
    CodeRegion region = new CodeRegion(this, 1);
    MetadataTools ef = new MetadataTools(this);

    string inputFile = @"..\VirtualTFS.edmx";
    EdmItemCollection ItemCollection = loader.CreateEdmItemCollection(inputFile);
    string namespaceName = code.VsNamespaceSuggestion();

    EntityFrameworkTemplateFileManager fileManager = EntityFrameworkTemplateFileManager.Create(this);

    // Emit Entity Types
    foreach (EntityType entity in ItemCollection.GetItems<EntityType>().OrderBy(e => e.Name))
    {
        string filename = entity.Name + "Repository.cs";

        // Write out support code to primary template output file
        fileManager.StartNewFile(filename);
        WriteHeader(fileManager);
        BeginNamespace(namespaceName, code);
        BeginBodyClass(entity, code, region);

        if(!DoesFileExist(filename))
        {
            EndBodyClass();
            EndNamespace(namespaceName);
        }
        //break;
    }
    fileManager.Process();
#>

<#+
    void WriteHeader(EntityFrameworkTemplateFileManager fileManager, params string[] extraUsings)
    {
        //fileManager.StartHeader();
#>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.Linq;
using System.Linq.Expressions;
using VirtualTFS.DAL;

<#+
        //String.Join(String.Empty, extraUsings.Select(u => "using " + u + ";" + Environment.NewLine).ToArray());
        //fileManager.EndBlock();
    }
#>

<#+
    void BeginNamespace(string namespaceName, CodeGenerationTools code)
    {
        CodeRegion region = new CodeRegion(this);
        if (!String.IsNullOrEmpty(namespaceName))
        {
#>
namespace <#=
            code.EscapeNamespace(namespaceName)
            #>
{
<#+
            PushIndent(CodeRegion.GetIndent(1));
        }
    }
#>

<#+
    void EndNamespace(string namespaceName)
    {
        if (!String.IsNullOrEmpty(namespaceName))
        {
            PopIndent();
#>
}
<#+
        }
    }
#>

<#+
    void BeginBodyClass(EntityType entity, CodeGenerationTools code, CodeRegion region)
    {
        string customCode = string.Empty;
        string filename = entity.Name + "Repository.cs";
        if(DoesFileExist(filename))
            customCode = OutputCustomCode(filename);

        string tableName = entity.Name;
        string _tableName = "_" + char.ToLower(tableName[0]).ToString() + tableName.Substring(1, tableName.Length - 1);
#>
/// <summary>
/// Repository for table <#=        code.Escape(entity.Name)#> 
/// </summary>
<#=        Accessibility.ForType(entity)#> <#=        code.SpaceAfter(code.AbstractOption(entity))#>partial class <#=        code.Escape(entity.Name + "Repository")#><#=        code.StringBefore(" : ", code.Escape(entity.BaseType))#>
{
<#+
        region.Begin("auto generate code");
        PopIndent();
        this.WriteLine(string.Empty);
        region.Begin("variable define");
        PushIndent(CodeRegion.GetIndent(2));
        this.WriteLine(string.Empty);
#>
IUnitOfWork unitOfWork;
<#+
        PopIndent();
        region.End();
        this.WriteLine(string.Empty);
        region.Begin("Ctor");
        PushIndent(CodeRegion.GetIndent(2));
        this.WriteLine(string.Empty);
        #>
// Default contructor that creates an instance of unit of work
public <#=        code.Escape(entity.Name + "Repository")#>()
{
    if (null == unitOfWork)
        unitOfWork = new UnitOfWork();
}
<#+        this.WriteLine(string.Empty);#>
// Constructor of an instance of unit of work
public <#=        code.Escape(entity.Name + "Repository")#>(IUnitOfWork _unitOfWork)
{
    unitOfWork = _unitOfWork;
}
<#+
        PopIndent();
        region.End();
        this.WriteLine(string.Empty);
        region.Begin("Basic C.R.U.D. operations");
        PushIndent(CodeRegion.GetIndent(2));
        this.WriteLine(string.Empty);
#>
// List of all <#=        code.Escape(entity.Name)#> 
public IList<<#=        code.Escape(entity.Name)#>> GetAll<#=        code.Escape(entity.Name)#>()
{
    return unitOfWork.GetAll<<#=        code.Escape(entity.Name)#>>();
}
<#+        this.WriteLine(string.Empty);#>
// Find all <#=        code.Escape(entity.Name)#> 
public IList<<#=        code.Escape(entity.Name)#>> Find<#=        code.Escape(entity.Name)#>(Expression<Func<<#=        code.Escape(entity.Name)#>, bool>> expression)
{
    return unitOfWork.Find<<#=        code.Escape(entity.Name)#>>(expression).ToList();
}
<#+        this.WriteLine(string.Empty);#>
// Get single <#=        code.Escape(entity.Name)#> 
public <#=        code.Escape(entity.Name)#> GetSingle<#=        code.Escape(entity.Name)#>(Func<<#=        code.Escape(entity.Name)#>, bool> expression)
{
    return unitOfWork.GetSingle<<#=        code.Escape(entity.Name)#>>(expression);
}
<#+        this.WriteLine(string.Empty);#>
// Add a new <#=        code.Escape(entity.Name)#> 
public <#=        code.Escape(entity.Name)#> Add<#=        code.Escape(entity.Name)#>(<#=        code.Escape(entity.Name)#> <#=        code.Escape(_tableName)#>)
{
    unitOfWork.Add<<#=        code.Escape(entity.Name)#>>(<#=        code.Escape(_tableName)#>);
    return <#=        code.Escape(_tableName)#>;
}
<#+        this.WriteLine(string.Empty);#>
// Delete a existed <#=        code.Escape(entity.Name)#> 
public void Delete<#=        code.Escape(entity.Name)#>(<#=        code.Escape(entity.Name)#> <#=        code.Escape(_tableName)#>)
{
    unitOfWork.Delete<<#=        code.Escape(entity.Name)#>>(<#=        code.Escape(_tableName)#>);
}
<#+        this.WriteLine(string.Empty);#>
// Delete batch a existed <#=        code.Escape(entity.Name)#> 
public void DeleteBatch<#=        code.Escape(entity.Name)#>(IEnumerable<<#=        code.Escape(entity.Name)#>> collection)
{
	foreach(var item in collection)
	{
		unitOfWork.Delete<<#=        code.Escape(entity.Name)#>>(item);
	}
}
<#+        this.WriteLine(string.Empty);#>
// Update a existed <#=        code.Escape(entity.Name)#> 
public <#=        code.Escape(entity.Name)#> Update<#=        code.Escape(entity.Name)#>(<#=        code.Escape(entity.Name)#> <#=        code.Escape(_tableName)#>)
{
    unitOfWork.Update<<#=        code.Escape(entity.Name)#>>(<#=        code.Escape(_tableName)#>);
    return <#=        code.Escape(_tableName)#>;
}
<#+        this.WriteLine(string.Empty);#>
// Refresh an existed <#=        code.Escape(entity.Name)#> 
public <#=        code.Escape(entity.Name)#> Refesh<#=        code.Escape(entity.Name)#>(<#=        code.Escape(entity.Name)#> <#=        code.Escape(_tableName)#>)
{
    unitOfWork.Refresh<<#=        code.Escape(entity.Name)#>>(<#=        code.Escape(_tableName)#>);
    return <#=        code.Escape(_tableName)#>;
}
<#+        this.WriteLine(string.Empty);#>
// Refresh All<#=        code.Escape(entity.Name)#> 
public void RefreshList<#=        code.Escape(entity.Name)#>(IEnumerable<<#=        code.Escape(entity.Name)#>> list)
{
    unitOfWork.RefreshList<<#=        code.Escape(entity.Name)#>>(list);
}
<#+        this.WriteLine(string.Empty);#>
// Commit all changes 
public void Commit()
{
    unitOfWork.Commit();
}
<#+
        PopIndent();
        region.End();
        //this.WriteLine(string.Empty);
        PushIndent(CodeRegion.GetIndent(1));
        region.End();
        this.WriteLine(string.Empty);
        if(DoesFileExist(filename))
        {
            PopIndent();
            this.Write(customCode);
        }
        else
        {
            region.Begin("all the custom code");
            this.WriteLine(string.Empty);
            region.End();
        }
    }
#>

<#+
    void EndBodyClass()
    {
#>
}
<#+
    }
#>

<#+
    bool DoesFileExist(string filename)
    {			
        return File.Exists(Path.Combine(GetCurrentDirectory(),filename));
    }
    
    string GetCurrentDirectory()
    {
        string executingDirectoryName = "";
        string stackTraceFileName = new StackTrace(true).GetFrame(0).GetFileName();
        if(String.IsNullOrEmpty(stackTraceFileName))
        {
            throw new ArgumentException("No value was specified for the 'directoryName' configuration parameter" +
                ", and we could not figure out the file name from the stack trace (most likely because of running " +
                "the template with debug='False' specified in the <\u0023@ template \u0023> directive.");
        }
        else
        {		
            executingDirectoryName = Path.GetDirectoryName(stackTraceFileName);
        }	
        return executingDirectoryName;
    }
    
    string OutputCustomCode(string filename)
    {
        using (StreamReader sr = new StreamReader(Path.Combine(GetCurrentDirectory(), filename)))
        {
            string textCustomRegion = "#region all the custom code";
            string line = string.Empty;
            string contents = string.Empty;
            while ((line = sr.ReadLine()) != null)
            {
                if (line.Contains(textCustomRegion))
                    contents = line + Environment.NewLine + sr.ReadToEnd();
            }
            return contents;
        }
    }
#>