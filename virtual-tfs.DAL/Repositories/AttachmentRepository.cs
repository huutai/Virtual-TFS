//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.Linq;
using System.Linq.Expressions;
using VirtualTFS.DAL;

namespace VirtualTFS.DAL.Repositories
{
    /// <summary>
    /// Repository for table Attachment 
    /// </summary>
    public partial class AttachmentRepository
    {
        #region auto generate code

        #region variable define

        IUnitOfWork unitOfWork;

        #endregion


        #region Ctor

        // Default contructor that creates an instance of unit of work
        public AttachmentRepository()
        {
            if (null == unitOfWork)
                unitOfWork = new UnitOfWork();
        }

        // Constructor of an instance of unit of work
        public AttachmentRepository(IUnitOfWork _unitOfWork)
        {
            unitOfWork = _unitOfWork;
        }

        #endregion


        #region Basic C.R.U.D. operations

        // List of all Attachment 
        public IList<Attachment> GetAllAttachment()
        {
            return unitOfWork.GetAll<Attachment>();
        }

        // Find all Attachment 
        public IList<Attachment> FindAttachment(Expression<Func<Attachment, bool>> expression)
        {
            return unitOfWork.Find<Attachment>(expression).ToList();
        }

        // Get single Attachment 
        public Attachment GetSingleAttachment(Func<Attachment, bool> expression)
        {
            return unitOfWork.GetSingle<Attachment>(expression);
        }

        // Add a new Attachment 
        public Attachment AddAttachment(Attachment _attachment)
        {
            unitOfWork.Add<Attachment>(_attachment);
            return _attachment;
        }

        // Delete a existed Attachment 
        public void DeleteAttachment(Attachment _attachment)
        {
            unitOfWork.Delete<Attachment>(_attachment);
        }

        // Delete batch a existed Attachment 
        public void DeleteBatchAttachment(IEnumerable<Attachment> collection)
        {
        	foreach(var item in collection)
        	{
        		unitOfWork.Delete<Attachment>(item);
        	}
        }

        // Update a existed Attachment 
        public Attachment UpdateAttachment(Attachment _attachment)
        {
            unitOfWork.Update<Attachment>(_attachment);
            return _attachment;
        }

        // Refresh an existed Attachment 
        public Attachment RefeshAttachment(Attachment _attachment)
        {
            unitOfWork.Refresh<Attachment>(_attachment);
            return _attachment;
        }

        // Refresh AllAttachment 
        public void RefreshListAttachment(IEnumerable<Attachment> list)
        {
            unitOfWork.RefreshList<Attachment>(list);
        }

        // Commit all changes 
        public void Commit()
        {
            unitOfWork.Commit();
        }

        #endregion


        #endregion


        #region all the custom code


        #endregion
    }
}
