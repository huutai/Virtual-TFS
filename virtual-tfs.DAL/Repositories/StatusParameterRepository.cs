//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.Linq;
using System.Linq.Expressions;
using VirtualTFS.DAL;

namespace VirtualTFS.DAL.Repositories
{
    /// <summary>
    /// Repository for table StatusParameter 
    /// </summary>
    public partial class StatusParameterRepository
    {
        #region auto generate code

        #region variable define

        IUnitOfWork unitOfWork;

        #endregion


        #region Ctor

        // Default contructor that creates an instance of unit of work
        public StatusParameterRepository()
        {
            if (null == unitOfWork)
                unitOfWork = new UnitOfWork();
        }

        // Constructor of an instance of unit of work
        public StatusParameterRepository(IUnitOfWork _unitOfWork)
        {
            unitOfWork = _unitOfWork;
        }

        #endregion


        #region Basic C.R.U.D. operations

        // List of all StatusParameter 
        public IList<StatusParameter> GetAllStatusParameter()
        {
            return unitOfWork.GetAll<StatusParameter>();
        }

        // Find all StatusParameter 
        public IList<StatusParameter> FindStatusParameter(Expression<Func<StatusParameter, bool>> expression)
        {
            return unitOfWork.Find<StatusParameter>(expression).ToList();
        }

        // Get single StatusParameter 
        public StatusParameter GetSingleStatusParameter(Func<StatusParameter, bool> expression)
        {
            return unitOfWork.GetSingle<StatusParameter>(expression);
        }

        // Add a new StatusParameter 
        public StatusParameter AddStatusParameter(StatusParameter _statusParameter)
        {
            unitOfWork.Add<StatusParameter>(_statusParameter);
            return _statusParameter;
        }

        // Delete a existed StatusParameter 
        public void DeleteStatusParameter(StatusParameter _statusParameter)
        {
            unitOfWork.Delete<StatusParameter>(_statusParameter);
        }

        // Delete batch a existed StatusParameter 
        public void DeleteBatchStatusParameter(IEnumerable<StatusParameter> collection)
        {
        	foreach(var item in collection)
        	{
        		unitOfWork.Delete<StatusParameter>(item);
        	}
        }

        // Update a existed StatusParameter 
        public StatusParameter UpdateStatusParameter(StatusParameter _statusParameter)
        {
            unitOfWork.Update<StatusParameter>(_statusParameter);
            return _statusParameter;
        }

        // Refresh an existed StatusParameter 
        public StatusParameter RefeshStatusParameter(StatusParameter _statusParameter)
        {
            unitOfWork.Refresh<StatusParameter>(_statusParameter);
            return _statusParameter;
        }

        // Refresh AllStatusParameter 
        public void RefreshListStatusParameter(IEnumerable<StatusParameter> list)
        {
            unitOfWork.RefreshList<StatusParameter>(list);
        }

        // Commit all changes 
        public void Commit()
        {
            unitOfWork.Commit();
        }

        #endregion


        #endregion


        #region all the custom code


        #endregion
    }
}
