//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.Linq;
using System.Linq.Expressions;
using VirtualTFS.DAL;

namespace VirtualTFS.DAL.Repositories
{
    /// <summary>
    /// Repository for table StatusToStatu 
    /// </summary>
    public partial class StatusToStatuRepository
    {
        #region auto generate code

        #region variable define

        IUnitOfWork unitOfWork;

        #endregion


        #region Ctor

        // Default contructor that creates an instance of unit of work
        public StatusToStatuRepository()
        {
            if (null == unitOfWork)
                unitOfWork = new UnitOfWork();
        }

        // Constructor of an instance of unit of work
        public StatusToStatuRepository(IUnitOfWork _unitOfWork)
        {
            unitOfWork = _unitOfWork;
        }

        #endregion


        #region Basic C.R.U.D. operations

        // List of all StatusToStatu 
        public IList<StatusToStatu> GetAllStatusToStatu()
        {
            return unitOfWork.GetAll<StatusToStatu>();
        }

        // Find all StatusToStatu 
        public IList<StatusToStatu> FindStatusToStatu(Expression<Func<StatusToStatu, bool>> expression)
        {
            return unitOfWork.Find<StatusToStatu>(expression).ToList();
        }

        // Get single StatusToStatu 
        public StatusToStatu GetSingleStatusToStatu(Func<StatusToStatu, bool> expression)
        {
            return unitOfWork.GetSingle<StatusToStatu>(expression);
        }

        // Add a new StatusToStatu 
        public StatusToStatu AddStatusToStatu(StatusToStatu _statusToStatu)
        {
            unitOfWork.Add<StatusToStatu>(_statusToStatu);
            return _statusToStatu;
        }

        // Delete a existed StatusToStatu 
        public void DeleteStatusToStatu(StatusToStatu _statusToStatu)
        {
            unitOfWork.Delete<StatusToStatu>(_statusToStatu);
        }

        // Delete batch a existed StatusToStatu 
        public void DeleteBatchStatusToStatu(IEnumerable<StatusToStatu> collection)
        {
        	foreach(var item in collection)
        	{
        		unitOfWork.Delete<StatusToStatu>(item);
        	}
        }

        // Update a existed StatusToStatu 
        public StatusToStatu UpdateStatusToStatu(StatusToStatu _statusToStatu)
        {
            unitOfWork.Update<StatusToStatu>(_statusToStatu);
            return _statusToStatu;
        }

        // Refresh an existed StatusToStatu 
        public StatusToStatu RefeshStatusToStatu(StatusToStatu _statusToStatu)
        {
            unitOfWork.Refresh<StatusToStatu>(_statusToStatu);
            return _statusToStatu;
        }

        // Refresh AllStatusToStatu 
        public void RefreshListStatusToStatu(IEnumerable<StatusToStatu> list)
        {
            unitOfWork.RefreshList<StatusToStatu>(list);
        }

        // Commit all changes 
        public void Commit()
        {
            unitOfWork.Commit();
        }

        #endregion


        #endregion


        #region all the custom code


        #endregion
    }
}
