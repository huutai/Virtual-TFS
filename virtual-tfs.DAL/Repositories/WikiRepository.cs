//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.Linq;
using System.Linq.Expressions;
using VirtualTFS.DAL;

namespace VirtualTFS.DAL.Repositories
{
    /// <summary>
    /// Repository for table Wiki 
    /// </summary>
    public partial class WikiRepository
    {
        #region auto generate code

        #region variable define

        IUnitOfWork unitOfWork;

        #endregion


        #region Ctor

        // Default contructor that creates an instance of unit of work
        public WikiRepository()
        {
            if (null == unitOfWork)
                unitOfWork = new UnitOfWork();
        }

        // Constructor of an instance of unit of work
        public WikiRepository(IUnitOfWork _unitOfWork)
        {
            unitOfWork = _unitOfWork;
        }

        #endregion


        #region Basic C.R.U.D. operations

        // List of all Wiki 
        public IList<Wiki> GetAllWiki()
        {
            return unitOfWork.GetAll<Wiki>();
        }

        // Find all Wiki 
        public IList<Wiki> FindWiki(Expression<Func<Wiki, bool>> expression)
        {
            return unitOfWork.Find<Wiki>(expression).ToList();
        }

        // Get single Wiki 
        public Wiki GetSingleWiki(Func<Wiki, bool> expression)
        {
            return unitOfWork.GetSingle<Wiki>(expression);
        }

        // Add a new Wiki 
        public Wiki AddWiki(Wiki _wiki)
        {
            unitOfWork.Add<Wiki>(_wiki);
            return _wiki;
        }

        // Delete a existed Wiki 
        public void DeleteWiki(Wiki _wiki)
        {
            unitOfWork.Delete<Wiki>(_wiki);
        }

        // Delete batch a existed Wiki 
        public void DeleteBatchWiki(IEnumerable<Wiki> collection)
        {
        	foreach(var item in collection)
        	{
        		unitOfWork.Delete<Wiki>(item);
        	}
        }

        // Update a existed Wiki 
        public Wiki UpdateWiki(Wiki _wiki)
        {
            unitOfWork.Update<Wiki>(_wiki);
            return _wiki;
        }

        // Refresh an existed Wiki 
        public Wiki RefeshWiki(Wiki _wiki)
        {
            unitOfWork.Refresh<Wiki>(_wiki);
            return _wiki;
        }

        // Refresh AllWiki 
        public void RefreshListWiki(IEnumerable<Wiki> list)
        {
            unitOfWork.RefreshList<Wiki>(list);
        }

        // Commit all changes 
        public void Commit()
        {
            unitOfWork.Commit();
        }

        #endregion


        #endregion


        #region all the custom code


        #endregion

    }
}
